plugins {
    id 'signing'
    id 'java'
    id 'maven-publish'
}

group = 'kiinse.plugins.darkwaterapi'
description = 'DarkWaterAPI'
version = '3.1.1'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url = uri('https://oss.sonatype.org/content/groups/public/') }
    maven { url = uri('https://repo.extendedclip.com/content/repositories/placeholderapi/') }
    maven { url = uri('https://repo.maven.apache.org/maven2/') }
    maven { url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/') }
}

dependencies {
    implementation 'com.vdurmont:semver4j:3.1.0'
    implementation 'org.json:json:20220924'
    implementation 'org.jetbrains:annotations:23.0.0'

    implementation project(":darkwater-api")
    implementation project(":darkwater-core")
    implementation project(":darkwater-common")

    compileOnly 'org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.10.9'
}

publishing {
    repositories {
        maven {
            name = "KiinseRepository"
            url = isSnapshot() ? "https://repo.kiinse.me/snapshots" : "https://repo.kiinse.me/releases"
            credentials {
                username System.getenv("USERNAME")
                password System.getenv("TOKEN")
            }
            authentication { basic(BasicAuthentication) }
        }
    }
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes["Main-Class"] = "kiinse.plugins.darkwaterapi.common.DarkWaterAPI"
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def isSnapshot() {
    return version.contains("beta") || version.contains("alpha") || version.contains("rc") || version.contains("SNAPSHOT")
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}